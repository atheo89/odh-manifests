# The aim of this GitHub workflow is to update the params.env file with the latest digest.
on:
  workflow_dispatch:
    inputs:
      branch:
        required: true
        description: "Provide the name of the branch you want to update ex master, rhods-x.xx etc"
      release-n:
        required: true
        description: "Provide release N version of the notebooks ex 2023a"

jobs:
  initialize:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install Skopeo CLI
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install skopeo
      # Checkout the release branch
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref:  ${{ inputs.branch }}

      # Create a new branch
      - name: Create a new branch
        run: |
         git checkout -b notebooks-digest-updater
         git push --set-upstream origin notebooks-digest-updater
  update-n-version:
    needs: [ initialize ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Configure Git
        run: |
         git config --global user.email "github-actions[bot]@users.noreply.github.com"
         git config --global user.name "GitHub Actions"
      # Get the latest weekly build commit hash: https://github.com/opendatahub-io/notebooks/commits/2023a
      - name: Checkout upstream notebooks repo
        uses: actions/checkout@v3
        with:
         repository: red-hat-data-services/notebooks
         ref: release-${{ inputs.release-n }}
      - name: Retrive latest weekly commit hash from the release branch
        id: hash
        shell: bash
        run: |
          echo "HASH=$(git rev-parse --short HEAD)" >> ${GITHUB_OUTPUT}
      # Checkout the release branch to apply the updates
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref: notebooks-digest-updater

      - name: Fetch digest, and update the param.env file
        run: |
              IMAGES=("odh-minimal-notebook-image-n" "odh-minimal-gpu-notebook-image-n" "odh-pytorch-gpu-notebook-image-n" "odh-generic-data-science-notebook-image-n" "odh-tensorflow-gpu-notebook-image-n" "odh-trustyai-notebook-image-n")
              REGEXES=("v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}" "cuda-[a-z]+-minimal-[a-z0-9]+-[a-z]+-3.9-${{ inputs.release-n }}-\d{8}-${{ steps.hash.outputs.HASH }}" "v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}" \
                       "v2-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}" "cuda-[a-z]+-tensorflow-[a-z0-9]+-[a-z]+-3.9-${{ inputs.release-n }}-\d{8}-${{ steps.hash.outputs.HASH }}" "v1-${{ inputs.release-n }}-\d{8}+-${{ steps.hash.outputs.HASH }}")
              for ((i=0;i<${#IMAGES[@]};++i)); do
                image=${IMAGES[$i]}
                echo $image
                regex=${REGEXES[$i]}
                img=$(cat jupyterhub/notebook-images/overlays/additional/params.env | grep -E "${image}=" | cut -d '=' -f2)
                registry=$(echo $img | cut -d '@' -f1)
                latest_tag=$(skopeo inspect docker://$img | jq -r --arg regex "$regex" '.RepoTags | map(select(. | test($regex))) | .[0]')
                digest=$(skopeo inspect docker://$registry:$latest_tag | jq .Digest | tr -d '"')
                output=$registry@$digest
                echo $output
                sed -i "s|${image}=.*|${image}=$output|" jupyterhub/notebook-images/overlays/additional/params.env
              done
              git fetch origin notebooks-digest-updater && git pull origin notebooks-digest-updater && git add jupyterhub/notebook-images/overlays/additional/params.env && git commit -m "Update file via digest-updater GitHub action" && git push origin digest-updater
  open-pull-request:
    needs: [ update-n-version ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: pull-request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: notebooks-digest-updater
          destination_branch: ${{ inputs.branch }}
          github_token: ${{ secrets.GH_ACCESS_TOKEN }}
          pr_label: "automated pr"
          pr_title: "[Digest Updater Action] Update notebook's imageStreams image tag to digest format"
          pr_body: |
            :rocket: This is a automated PR
            _Created by `/.github/workflows/notebooks-digest-updater-downstream.yaml`
            :exclamation: **IMPORTANT NOTE**: Remember to delete the `notebooks-digest-updater` branch after merging the changes
